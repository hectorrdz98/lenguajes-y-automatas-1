
# Just reading, searching for something

reading             Variable        * r variableAssign
reading             Function        * r checkFunction


# variableAssign area

variableAssign      EqualSign       * r variableValue
variableAssign      PlusOperator    * r variableValuePre
variableAssign      MinusOperator   * r variableValuePre
variableAssign      MultiOperator   * r variableValuePre
variableAssign      DivOperator     * r variableValuePre
variableAssign      PowOperator     * r variableValuePre
variableAssign      *               * l errorInvVarDec

variableValuePre    EqualSign       * r variableValue
variableValuePre    *               * l errorInvVarDec

variableValue       Integer         * r variableENDL
variableValue       Float           * r variableENDL
variableValue       Variable        * r variableENDL
variableValue       StringSQ        * r variableENDLStr
variableValue       StringDQ        * r variableENDLStr
variableValue       SingleQuote     * r sendErrorSQ
variableValue       DoubleQuote     * r sendErrorDQ
variableValue       NotValid        * l errorInvVarDecUn
variableValue       OpParenthesis   * * stackGrouped
variableValue       Function        * r checkFunction
variableValue       *               * l errorInvVarDec

variableValueNotStr Integer         * r variableENDL
variableValueNotStr Float           * r variableENDL
variableValueNotStr Variable        * r variableENDL
variableValueNotStr StringSQ        * r errorStrOp
variableValueNotStr StringDQ        * r errorStrOp
variableValueNotStr OpParenthesis   * * stackGrouped
variableValueNotStr Function        * r checkFunction
variableValueNotStr *               * l errorInvOp

variableENDL        BreakLine       * * checkGrouped
variableENDL        PlusOperator    * r variableValue
variableENDL        MinusOperator   * r variableValueNotStr
variableENDL        MultiOperator   * r variableValueNotStr
variableENDL        DivOperator     * r variableValueNotStr
variableENDL        PowOperator     * r variableValueNotStr
variableENDL        CloParenthesis  * * stackGrouped
variableENDL        *               * l errorInvOp

variableENDLStr     BreakLine       * * checkGrouped
variableENDLStr     PlusOperator    * r variableValue
variableENDLStr     MinusOperator   * r errorStrOp
variableENDLStr     MultiOperator   * r errorStrOp
variableENDLStr     DivOperator     * r errorStrOp
variableENDLStr     PowOperator     * r errorStrOp
variableENDLStr     CloParenthesis  * * stackGrouped
variableENDLStr     *               * l errorInvOp



# checkFunction area

checkFunction       OpParenthesis   * * stackFunctionParams
checkFunction       *               * l errorFInvCall

checkFunction2      BreakLine       * l errorFInvCall
checkFunction2      Integer         * r checkFuncENDL
checkFunction2      Float           * r checkFuncENDL
checkFunction2      Variable        * r checkFuncENDL
checkFunction2      StringSQ        * r checkFuncENDLStr
checkFunction2      StringDQ        * r checkFuncENDLStr
checkFunction2      SingleQuote     * r sendErrorSQ
checkFunction2      DoubleQuote     * r sendErrorDQ
checkFunction2      NotValid        * l errorInvVarDecUn
checkFunction2      OpParenthesis   * * stackFunctionParams
checkFunction2      *               * r errorInvOp

checkFun2NotStr     Integer         * r checkFuncENDL
checkFun2NotStr     Float           * r checkFuncENDL
checkFun2NotStr     Variable        * r checkFuncENDL
checkFun2NotStr     StringSQ        * r errorStrOp
checkFun2NotStr     StringDQ        * r errorStrOp
checkFun2NotStr     OpParenthesis   * * stackFunctionParams
checkFun2NotStr     *               * l errorInvOp 

checkFuncENDL       BreakLine       * l errorFInvCall
checkFuncENDL       PlusOperator    * r checkFunction2
checkFuncENDL       MinusOperator   * r checkFun2NotStr
checkFuncENDL       MultiOperator   * r checkFun2NotStr
checkFuncENDL       DivOperator     * r checkFun2NotStr
checkFuncENDL       PowOperator     * r checkFun2NotStr
checkFuncENDL       CloParenthesis  * * stackFunctionParams
checkFuncENDL       *               * l errorInvOp

checkFuncENDLStr    BreakLine       * l errorFInvCall
checkFuncENDLStr    PlusOperator    * r checkFunction2
checkFuncENDLStr    MinusOperator   * r errorStrOp
checkFuncENDLStr    MultiOperator   * r errorStrOp
checkFuncENDLStr    DivOperator     * r errorStrOp
checkFuncENDLStr    PowOperator     * r errorStrOp
checkFuncENDLStr    CloParenthesis  * * stackFunctionParams
checkFuncENDLStr    *               * l errorInvOp


# Errors

sendErrorSQ        BreakLine       * l errorSQ
sendErrorSQ        *               * r sendErrorSQ      

sendErrorDQ        BreakLine       * l errorDQ
sendErrorDQ        *               * r sendErrorDQ   